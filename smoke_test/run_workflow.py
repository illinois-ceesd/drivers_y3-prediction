#!/usr/bin/env python3

import parsl
from parsl.config import Config
from parsl.providers import LSFProvider, SlurmProvider
from parsl.executors import HighThroughputExecutor, ThreadPoolExecutor
from parsl.launchers import JsrunLauncher, SrunLauncher
from parsl.addresses import address_by_hostname
from parsl.app.app import bash_app, python_app

executor_name = "my_executor"
host = address_by_hostname()
if 'lassen' in host.lower():
    executor = HighThroughputExecutor(
        label=executor_name,
        address=address_by_hostname(),
        worker_debug=True,
        provider=LSFProvider(launcher=JsrunLauncher(overrides=''),
            walltime='01:00:00',
            nodes_per_block=1,
            init_blocks=1,
            max_blocks=1,
            bsub_redirection=True,
            queue='pdebug',
            worker_init=(
                "module load spectrum-mpi\n"
                "source emirge/miniforge3/bin/activate mirgeDriver.Y3prediction\n"
                "export PYOPENCL_CTX=port:tesla\n"
                "export XDG_CACHE_HOME=/tmp/$USER/xdg-scratch\n"),
            project='uiuc')
        )
elif 'quartz' in host.lower():
    executor = HighThroughputExecutor(label=executor_name,
        address=address_by_hostname(),
        worker_debug=True,
        provider=SlurmProvider(launcher=SrunLauncher(overrides=''),
            walltime='01:00:00',
            nodes_per_block=1,
            init_blocks=1,
            max_blocks=1,
            scheduler_options='#SBATCH -q pdebug',
            worker_init=(
                "module load spectrum-mpi\n"
                "source emirge/miniforge3/bin/activate mirgeDriver.Y3prediction\n"
                "export XDG_CACHE_HOME=/tmp/$USER/xdg-scratch\n"),
            )
        )
else:
    executor = ThreadPoolExecutor(label=executor_name)

config = Config(executors=[executor])
parsl.load(config)

@bash_app(executors=[executor_name])
def _mpirun(module="driver.py", yml="run_params.yaml", c=None, t=None, r=None, lazy=True):
    """ Generate and return the mpirun command line based on inputs

        Parameters
        ----------
        module: the python module to run (default is "driver.py")
        yml: the name of the yaml comtrol file (default is "run_params.yaml")
        c: the file name to pass to the -c argument of the module (default is None, i.e. do not set the argument)
        t: the file name to pass to the -t argument of the module (default is None, i.e. do not set the argument)
        r: the file name to pass to the -r argument of the module (default is None, i.e. do not set the argument)
        lazy: boolean, whether to set the lazt flag for the module
    """
    cmd = f"mpirun -n 2 python -u -O -m mpi4py {module} -i {yml} --log"
    if lazy:
        cmd += " --lazy"
    if t:
        cmd += f" -t {t}"
    if r:
        cmd += f" -r {r}"
    if c:
        cmd += f" -c {c}"
    print(f"\n\n{cmd}\n\n")
    return cmd


@python_app(executors=[executor_name])
def mpirun(directory="", filepat="", module="driver.py", yml="run_params.yaml", c=None, t=None, r=None, lazy=True, inputs=[], outputs=[]):
    """ Set up, generate, and run the mpirun command.

        Parameters
        ----------
        directory: the directory to cd into
        filepat: the file pattern to look for output files (e.g. 'prediction-000000100')
        module: the python module to run (default is "driver.py")
        yml: the name of the yaml comtrol file (default is "run_params.yaml")
        c: the file name to pass to the -c argument of the module (default is None, i.e. do not set the argument)
        t: the file name to pass to the -t argument of the module (default is None, i.e. do not set the argument)
        r: the file name to pass to the -r argument of the module (default is None, i.e. do not set the argument)
        lazy: boolean, whether to set the lazt flag for the module
        inputs: list of parsl.File objects giving any input files
        outputs: list of parsl.File objects generated by this operation (given as an empty list and populated by this function)

    """
    import os
    import shutil
    import glob
    from parsl.data_provider.files import File
    print(f"**********************   STARTING   {directory}    ******************")
    cwd = os.getcwd()
    if directory:
        os.chdir(directory)

    try:
        os.makedirs('init_data', exist_ok=True)
        # copy input files
        for ifile in inputs:
            shutil.copy2(ifile.filepath, f"init_data/{ifile.filename}")
        run = _mpirun(module=module, yml=yml, c=c, t=t, r=r, lazy=lazy)
        try:
            if run.result() != 0:
                raise Exception(f"mpirun failed with exit code {run.result()}")
        except:
            raise
        if filepat:
            for fname in glob.glob(f"{os.getcwd()}/restart_data/{filepat}*"):
                outputs.append(File(fname))
    finally:
        os.chdir(cwd)
        print(f"*******************************   FINISHED {directory} ***************************")


def main():
    outp = []
    s1 = mpirun(filepat='prediction-000000020', outputs=outp, lazy=False)
    s1.result()  # wait until it is done

    print(f"{outp=}")

    outp_vd = []
    s1_vd = mpirun(filepat='prediction-000000020', yml=run_outputs=outp_vd, lazy=False)
    s1_vd.result()  # wait until it is done

if __name__ == "__main__":
    main()
